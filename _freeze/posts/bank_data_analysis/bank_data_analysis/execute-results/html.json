{
  "hash": "b975575a40b68004f00cbbdb9dc79a70",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bank's Data Analysis\"\nexecute:\n  eval: false\n  enabled: true\n  freeze: true\n  cache: true\n  warning: false\nimage: \"db.png\"\ndescription: \"A SQL approach to data analysis\"\nauthor: \"Simone Brazzi\"\ndate: \"2025-02-10\"\ndraft: false\ncategories:\n  - code\n  - SQL\n  - database\ntoc: TRUE\ntoc-title: \"Table of Contents\"\ntoc-depth: 3\nnumber-sections: TRUE\nother-links:\n  - text: Shiny Dashboard\n    href: \"https://simonebrazzi-sql-query.share.connect.posit.cloud/\"\n---\n\n\n\n# Introduction\n\n::: callout.important\nPlease check this [Shiny Dashboard](https://simonebrazzi-sql-query.share.connect.posit.cloud/).\n:::\n\n## Project Description\n\nThe company Banking Intelligence wants to develop a supervised machine learning model to predict the future behaviour of its customers, based on transactional data and product ownership characteristics. The aim of the project is to create a denormalised table with a series of indicators (features) derived from the tables available in the database, representing the customers' financial behaviours and activities.\n\n## Objective\n\nOur objective is to create a **feature table** for training machine learning models, enriching customer data with various **indicators** calculated from their transactions and accounts held. The final table will be related to the customer ID and will contain both quantitative and qualitative information.\n\n## Value Added\n\nThe denormalised table will allow the extraction of advanced behavioural features for training supervised machine learning models, providing numerous benefits for the company:\n\n-   **Prediction of customer behaviour**: By analysing transactions and product ownership, useful behaviour patterns can be identified to predict future actions such as purchasing new products or closing accounts.\n\n-   **Reducing churn rates**: Using behavioural indicators, a model can be built to identify customers at risk of abandonment, allowing timely interventions by the marketing team.\n\n-   **Improved risk management**: Segmentation based on financial behaviour allows high-risk customers to be identified and credit and risk strategies to be optimised.\n\n-   **Customisation of offers**: Extracted features can be used to customise product and service offers according to the habits and preferences of individual customers, thereby increasing customer satisfaction.\n\n-   **Fraud prevention**: By analysing transactions by type and amount, the model can detect behavioural anomalies indicative of fraud, improving security and prevention strategies.\n\nThese benefits will lead to an overall improvement in business operations, enabling more efficient customer management and sustainable business growth.\n\n## Behavioural Indicators to be Calculated\n\nIndicators will be calculated for each individual customer (referring to id_customer) and include:\n\n## Basic indicators\n\n-   Age of customer (from customer table)\n\n## Transaction indicators\n\n-   Number of outgoing transactions on all accounts.\n-   Number of incoming transactions on all accounts.\n-   Total amount transacted out on all accounts.\n-   Total amount transacted incoming on all accounts.\n\n## Account Indicators\n\n-   Total number of accounts held.\n-   Number of accounts held by type (one indicator for each type of account).\n\n## Transaction indicators by account type\n\n-   Number of outgoing transactions by account type (one indicator per account type).\n-   Number of incoming transactions by account type (one indicator per account type).\n-   Outgoing transacted amount by account type (one indicator per account type).\n-   Amount transacted inbound by account type (one indicator per account type).\n\n# Plan for Creating Denormalised Table\n\n## Table Join\n\nTo construct the final table, it will be necessary to perform a series of joins between the tables available in the database.\n\n## Calculation of Indicators\n\nBehavioural indicators will be calculated using aggregation operations (SUM, COUNT) to obtain the required totals.\n\n# Code\n\n## Import\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(duckdb)\nlibrary(RMariaDB)\n```\n:::\n\n\n\n## Create db connection\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- dbConnect(RMariaDB::MariaDB(),\n                 user = \"username\",\n                 password = \"password\",\n                 host = \"localhost\",\n                 dbname = \"dbname\")\ndbListTables(con)\n```\n:::\n\n\n\n## Query\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(\n  con,\n  \"\n  CREATE TEMPORARY TABLE IF NOT EXISTS features (\n  SELECT \n    cliente.id_cliente,\n    TIMESTAMPDIFF(YEAR, cliente.data_nascita, CURRENT_DATE()) AS eta,\n    COUNT(CASE WHEN tipo_transazione.segno = '-' THEN 1 ELSE 0 END) AS n_transazioni_uscita,\n    COUNT(CASE WHEN tipo_transazione.segno = '+' THEN 1 ELSE 0 END) AS n_transazioni_entrata,\n    SUM(CASE WHEN tipo_transazione.segno = '-' THEN transazioni.importo ELSE 0 END) AS tot_uscita,\n    SUM(CASE WHEN tipo_transazione.segno = '+' THEN transazioni.importo ELSE 0 END) AS tot_entrata,\n    COUNT(DISTINCT conto.id_conto) AS n_conti,\n    COUNT(CASE WHEN tipo_conto.desc_tipo_conto = 'Conto Privati' THEN 1 ELSE 0 END) AS n_conto_privati,\n    COUNT(CASE WHEN tipo_conto.desc_tipo_conto = 'Conto Base' THEN 1 ELSE 0 END) AS n_conto_base,\n    COUNT(CASE WHEN tipo_conto.desc_tipo_conto = 'Conto Business' THEN 1 ELSE 0 END) AS n_conto_business,\n    COUNT(CASE WHEN tipo_conto.desc_tipo_conto = 'Conto Famiglie' THEN 1 ELSE 0 END) AS n_conto_famiglie,\n    SUM(CASE WHEN tipo_conto.desc_tipo_conto = 'Conto Privati' AND tipo_transazione.segno = '-' THEN transazioni.importo ELSE 0 END) AS tot_uscita_conto_privati,\n    SUM(CASE WHEN tipo_conto.desc_tipo_conto = 'Conto Base' AND tipo_transazione.segno = '-' THEN transazioni.importo ELSE 0 END) AS tot_uscita_conto_base,\n    SUM(CASE WHEN tipo_conto.desc_tipo_conto = 'Conto Business' AND tipo_transazione.segno = '-' THEN transazioni.importo ELSE 0 END) AS tot_uscita_conto_business,\n    SUM(CASE WHEN tipo_conto.desc_tipo_conto = 'Conto Famiglie' AND tipo_transazione.segno = '-' THEN transazioni.importo ELSE 0 END) AS tot_uscita_conto_famiglie,\n    SUM(CASE WHEN tipo_conto.desc_tipo_conto = 'Conto Privati' AND tipo_transazione.segno = '+' THEN transazioni.importo ELSE 0 END) AS tot_entrata_conto_privati,\n    SUM(CASE WHEN tipo_conto.desc_tipo_conto = 'Conto Base' AND tipo_transazione.segno = '+' THEN transazioni.importo ELSE 0 END) AS tot_entrata_conto_base,\n    SUM(CASE WHEN tipo_conto.desc_tipo_conto = 'Conto Business' AND tipo_transazione.segno = '+' THEN transazioni.importo ELSE 0 END) AS tot_entrata_conto_business,\n    SUM(CASE WHEN tipo_conto.desc_tipo_conto = 'Conto Famiglie' AND tipo_transazione.segno = '+' THEN transazioni.importo ELSE 0 END) AS tot_entrata_conto_famiglie\n  FROM cliente\n  LEFT JOIN conto ON cliente.id_cliente = conto.id_cliente\n  LEFT JOIN tipo_conto ON conto.id_tipo_conto = tipo_conto.id_tipo_conto\n  LEFT JOIN transazioni ON conto.id_conto = transazioni.id_conto\n  LEFT JOIN tipo_transazione ON transazioni.id_tipo_trans = tipo_transazione.id_tipo_transazione\n  GROUP BY cliente.id_cliente\n  ORDER BY cliente.id_cliente);\n  \"\n)\n```\n:::\n\n\n\n## Consideration\n\nTo better interact with the database, go to the [Shiny dashboard](https://simonebrazzi-sql-query.share.connect.posit.cloud/) or click on the link at the top of this page or in the table of content.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}