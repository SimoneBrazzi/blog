[
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Toxic Comment Filter\n\n\n\n\n\n\ncode\n\n\nDeep Learning\n\n\nPython, R\n\n\n\nBiLSTM model for multi label classification\n\n\n\n\n\nAug 12, 2024\n\n\nSimone Brazzi\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/toxic_comment_filter/toxic_comment_filter.html",
    "href": "posts/toxic_comment_filter/toxic_comment_filter.html",
    "title": "Toxic Comment Filter",
    "section": "",
    "text": "Costruire un modello in grado di filtrare i commenti degli utenti in base al grado di dannosità del linguaggio.\nPreprocessare il testo eliminando l’insieme di token che non danno contributo significativo a livello semantico.\nTrasformare il corpus testuale in sequenze.\nCostruire un modello di Deep Learning comprendente dei layer ricorrenti per un task di classificazione multilabel.\n\nIn prediction time, il modello deve ritornare un vettore contenente un 1 o uno 0 in corrispondenza di ogni label presente nel dataset (toxic, severe_toxic, obscene, threat, insult, identity_hate). In questo modo, un commento non dannoso sarà classificato da un vettore di soli 0 [0,0,0,0,0,0]. Al contrario, un commento pericoloso presenterà almeno un 1 tra le 6 labels."
  },
  {
    "objectID": "posts/toxic_comment_filter/toxic_comment_filter.html#import-r-libraries",
    "href": "posts/toxic_comment_filter/toxic_comment_filter.html#import-r-libraries",
    "title": "Toxic Comment Filter",
    "section": "2.1 Import R libraries",
    "text": "2.1 Import R libraries\nImport R libraries. These will be used for both the rendering of the document and data analysis. The reason is I prefer ggplot2 over matplotlib. I will also use colorblind safe palettes.\n\n\nCode\nlibrary(tidyverse, verbose = FALSE)\nlibrary(tidymodels, verbose = FALSE)\nlibrary(reticulate)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(RColorBrewer)\nlibrary(bslib)\nlibrary(Metrics)\n\nreticulate::use_virtualenv(\"r-tf\")"
  },
  {
    "objectID": "posts/toxic_comment_filter/toxic_comment_filter.html#import-python-packages",
    "href": "posts/toxic_comment_filter/toxic_comment_filter.html#import-python-packages",
    "title": "Toxic Comment Filter",
    "section": "2.2 Import Python packages",
    "text": "2.2 Import Python packages\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport keras\nimport keras_nlp\n\nfrom keras.backend import clear_session\nfrom keras.models import Model, load_model\nfrom keras.layers import TextVectorization, Input, Dense, Embedding, Dropout, GlobalAveragePooling1D, LSTM, Bidirectional, GlobalMaxPool1D, Flatten, Attention\nfrom keras.metrics import Precision, Recall, AUC, SensitivityAtSpecificity, SpecificityAtSensitivity, F1Score\n\n\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.metrics import multilabel_confusion_matrix, classification_report, ConfusionMatrixDisplay, precision_recall_curve, f1_score, recall_score, roc_auc_score\n\n\nCreate a Config class to store all the useful parameters for the model and for the project."
  },
  {
    "objectID": "posts/toxic_comment_filter/toxic_comment_filter.html#class-config",
    "href": "posts/toxic_comment_filter/toxic_comment_filter.html#class-config",
    "title": "Toxic Comment Filter",
    "section": "2.3 Class Config",
    "text": "2.3 Class Config\nI created a class with all the basic configuration of the model, to improve the readability.\n\n\nCode\nclass Config():\n    def __init__(self):\n        self.url = \"https://s3.eu-west-3.amazonaws.com/profession.ai/datasets/Filter_Toxic_Comments_dataset.csv\"\n        self.max_tokens = 20000\n        self.output_sequence_length = 911 # check the analysis done to establish this value\n        self.embedding_dim = 128\n        self.batch_size = 32\n        self.epochs = 100\n        self.temp_split = 0.3\n        self.test_split = 0.5\n        self.random_state = 42\n        self.total_samples = 159571 # total train samples\n        self.train_samples = 111699\n        self.val_samples = 23936\n        self.features = 'comment_text'\n        self.labels = ['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']\n        self.new_labels = ['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate', \"clean\"]\n        self.label_mapping = {label: i for i, label in enumerate(self.labels)}\n        self.new_label_mapping = {label: i for i, label in enumerate(self.labels)}\n        self.path = \"/Users/simonebrazzi/R/blog/posts/toxic_comment_filter/history/f1score/\"\n        self.model =  self.path + \"model_f1.keras\"\n        self.checkpoint = self.path + \"checkpoint.lstm_model_f1.keras\"\n        self.history = self.path + \"lstm_model_f1.xlsx\"\n        \n        self.metrics = [\n            Precision(name='precision'),\n            Recall(name='recall'),\n            AUC(name='auc', multi_label=True, num_labels=len(self.labels)),\n            F1Score(name=\"f1\", average=\"macro\")\n            \n        ]\n    def get_early_stopping(self):\n        early_stopping = keras.callbacks.EarlyStopping(\n            monitor=\"val_f1\", # \"val_recall\",\n            min_delta=0.2,\n            patience=10,\n            verbose=0,\n            mode=\"max\",\n            restore_best_weights=True,\n            start_from_epoch=3\n        )\n        return early_stopping\n\n    def get_model_checkpoint(self, filepath):\n        model_checkpoint = keras.callbacks.ModelCheckpoint(\n            filepath=filepath,\n            monitor=\"val_f1\", # \"val_recall\",\n            verbose=0,\n            save_best_only=True,\n            save_weights_only=False,\n            mode=\"max\",\n            save_freq=\"epoch\"\n        )\n        return model_checkpoint\n\n    def find_optimal_threshold_cv(self, ytrue, yproba, metric, thresholds=np.arange(.05, .35, .05), n_splits=7):\n\n      # instantiate KFold\n      kf = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n      threshold_scores = []\n\n      for threshold in thresholds:\n\n        cv_scores = []\n        for train_index, val_index in kf.split(ytrue):\n\n          ytrue_val = ytrue[val_index]\n          yproba_val = yproba[val_index]\n\n          ypred_val = (yproba_val &gt;= threshold).astype(int)\n          score = metric(ytrue_val, ypred_val, average=\"macro\")\n          cv_scores.append(score)\n\n        mean_score = np.mean(cv_scores)\n        threshold_scores.append((threshold, mean_score))\n\n        # Find the threshold with the highest mean score\n        best_threshold, best_score = max(threshold_scores, key=lambda x: x[1])\n      return best_threshold, best_score\n\nconfig = Config()"
  },
  {
    "objectID": "posts/toxic_comment_filter/toxic_comment_filter.html#eda",
    "href": "posts/toxic_comment_filter/toxic_comment_filter.html#eda",
    "title": "Toxic Comment Filter",
    "section": "3.1 EDA",
    "text": "3.1 EDA\nFirst a check on the dataset to find possible missing values and imbalances.\n\n3.1.1 Frequency\n\nCode\nlibrary(reticulate)\ndf_r &lt;- py$df\nnew_labels_r &lt;- py$config$new_labels\n\ndf_r_grouped &lt;- df_r %&gt;% \n  select(all_of(new_labels_r)) %&gt;%\n  pivot_longer(\n    cols = all_of(new_labels_r),\n    names_to = \"label\",\n    values_to = \"value\"\n  ) %&gt;% \n  group_by(label) %&gt;%\n  summarise(count = sum(value)) %&gt;% \n  mutate(freq = round(count / sum(count), 4))\n\ndf_r_grouped\n\n\n\n\nTable 2: Absolute and relative labels frequency\n\n\n\n# A tibble: 7 × 3\n  label          count   freq\n  &lt;chr&gt;          &lt;dbl&gt;  &lt;dbl&gt;\n1 clean         143346 0.803 \n2 identity_hate   1405 0.0079\n3 insult          7877 0.0441\n4 obscene         8449 0.0473\n5 severe_toxic    1595 0.0089\n6 threat           478 0.0027\n7 toxic          15294 0.0857\n\n\n\n\n\n\n3.1.2 Barchart\n\n\nCode\nlibrary(reticulate)\nbarchart &lt;- df_r_grouped %&gt;%\n  ggplot(aes(x = reorder(label, count), y = count, fill = label)) +\n  geom_col() +\n  labs(\n    x = \"Labels\",\n    y = \"Count\"\n  ) +\n  # sort bars in descending order\n  scale_x_discrete(limits = df_r_grouped$label[order(df_r_grouped$count, decreasing = TRUE)]) +\n  scale_fill_brewer(type = \"seq\", palette = \"RdYlBu\") +\n  theme_minimal()\nggplotly(barchart)\n\n\n\n\n\n\n\n\nFigure 1: Imbalance in the dataset with clean variable\n\n\n\n\nIt is visible how much the dataset in imbalanced. This means it could be useful to check for the class weight and use this argument during the training.\nIt is clear that most of our text are clean. We are talking about 0.8033 of the observations which are clean. Only 0.1967 are toxic comments."
  },
  {
    "objectID": "posts/toxic_comment_filter/toxic_comment_filter.html#sequence-lenght-definition",
    "href": "posts/toxic_comment_filter/toxic_comment_filter.html#sequence-lenght-definition",
    "title": "Toxic Comment Filter",
    "section": "3.2 Sequence lenght definition",
    "text": "3.2 Sequence lenght definition\nTo convert the text in a useful input for a NN, it is necessary to use a TextVectorization layer. See the Section 4 section.\nOne of the method is output_sequence_length: to better define it, it is useful to analyze our text length. To simulate what the model we do, we are going to remove the punctuation and the new lines from the comments.\n\n3.2.1 Summary\n\nCode\nlibrary(reticulate)\ndf_r %&gt;% \n  mutate(\n    comment_text_clean = comment_text %&gt;%\n      tolower() %&gt;% \n      str_remove_all(\"[[:punct:]]\") %&gt;% \n      str_replace_all(\"\\n\", \" \"),\n    text_length = comment_text_clean %&gt;% str_count()\n    ) %&gt;% \n  pull(text_length) %&gt;% \n  summary() %&gt;% \n  as.list() %&gt;% \n  as_tibble()\n\n\n\n\nTable 3: Summary of text length\n\n\n\n# A tibble: 1 × 6\n   Min. `1st Qu.` Median  Mean `3rd Qu.`  Max.\n  &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1     4        91    196  378.       419  5000\n\n\n\n\n\n\n3.2.2 Boxplot\n\n\nCode\nlibrary(reticulate)\nboxplot &lt;- df_r %&gt;% \n  mutate(\n    comment_text_clean = comment_text %&gt;%\n      tolower() %&gt;% \n      str_remove_all(\"[[:punct:]]\") %&gt;% \n      str_replace_all(\"\\n\", \" \"),\n    text_length = comment_text_clean %&gt;% str_count()\n    ) %&gt;% \n  # pull(text_length) %&gt;% \n  ggplot(aes(y = text_length)) +\n  geom_boxplot() +\n  theme_minimal()\nggplotly(boxplot)\n\n\n\n\n\n\n\n\nFigure 2: Text length boxplot\n\n\n\n\n\n\n3.2.3 Histogram\n\n\nCode\nlibrary(reticulate)\ndf_ &lt;- df_r %&gt;% \n  mutate(\n    comment_text_clean = comment_text %&gt;%\n      tolower() %&gt;% \n      str_remove_all(\"[[:punct:]]\") %&gt;% \n      str_replace_all(\"\\n\", \" \"),\n    text_length = comment_text_clean %&gt;% str_count()\n  )\n\nQ1 &lt;- quantile(df_$text_length, 0.25)\nQ3 &lt;- quantile(df_$text_length, 0.75)\nIQR &lt;- Q3 - Q1\nupper_fence &lt;- as.integer(Q3 + 1.5 * IQR)\n\nhistogram &lt;- df_ %&gt;% \n  ggplot(aes(x = text_length)) +\n  geom_histogram(bins = 50) +\n  geom_vline(aes(xintercept = upper_fence), color = \"red\", linetype = \"dashed\", linewidth = 1) +\n  theme_minimal() +\n  xlab(\"Text Length\") +\n  ylab(\"Frequency\") +\n  xlim(0, max(df_$text_length, upper_fence))\nggplotly(histogram)\n\n\n\n\n\n\n\n\nFigure 3: Text length histogram with boxplot upper fence\n\n\n\n\nConsidering all the above analysis, I think a good starting value for the output_sequence_length is 911, the upper fence of the boxplot. In the last plot, it is the dashed red vertical line.. Doing so, we are removing the outliers, which are a small part of our dataset."
  },
  {
    "objectID": "posts/toxic_comment_filter/toxic_comment_filter.html#dataset",
    "href": "posts/toxic_comment_filter/toxic_comment_filter.html#dataset",
    "title": "Toxic Comment Filter",
    "section": "3.3 Dataset",
    "text": "3.3 Dataset\nNow we can split the dataset in 3: train, test and validation sets. Considering there is not a function in sklearn which lets split in these 3 sets, we can do the following: - split between a train and temporary set with a 0.3 split. - split the temporary set in 2 equal sized test and val sets.\n\n\nCode\nx = df[config.features].values\ny = df[config.labels].values\n\nxtrain, xtemp, ytrain, ytemp = train_test_split(\n  x,\n  y,\n  test_size=config.temp_split, # .3\n  random_state=config.random_state\n  )\nxtest, xval, ytest, yval = train_test_split(\n  xtemp,\n  ytemp,\n  test_size=config.test_split, # .5\n  random_state=config.random_state\n  )\n\n\nxtrain shape: py$xtrain.shape ytrain shape: py$ytrain.shape xtest shape: py$xtest.shape ytest shape: py$ytest.shape xval shape: py$xval.shape yval shape: py$yval.shape\nThe datasets are created using the tf.data.Dataset function. It creates a data input pipeline. The tf.data API makes it possible to handle large amounts of data, read from different data formats, and perform complex transformations. The tf.data.Dataset is an abstraction that represents a sequence of elements, in which each element consists of one or more components. Here each dataset is creates using from_tensor_slices. It create a tf.data.Dataset from a tuple (features, labels). .batch let us work in batches to improve performance, while .prefetch overlaps the preprocessing and model execution of a training step. While the model is executing training step s, the input pipeline is reading the data for step s+1. Check the documentation for further informations.\n\n\nCode\ntrain_ds = (\n    tf.data.Dataset\n    .from_tensor_slices((xtrain, ytrain))\n    .shuffle(xtrain.shape[0])\n    .batch(config.batch_size)\n    .prefetch(tf.data.experimental.AUTOTUNE)\n)\n\ntest_ds = (\n    tf.data.Dataset\n    .from_tensor_slices((xtest, ytest))\n    .batch(config.batch_size)\n    .prefetch(tf.data.experimental.AUTOTUNE)\n)\n\nval_ds = (\n    tf.data.Dataset\n    .from_tensor_slices((xval, yval))\n    .batch(config.batch_size)\n    .prefetch(tf.data.experimental.AUTOTUNE)\n)\n\n\n\n\nCode\nprint(\n  f\"train_ds cardinality: {train_ds.cardinality()}\\n\",\n  f\"val_ds cardinality: {val_ds.cardinality()}\\n\",\n  f\"test_ds cardinality: {test_ds.cardinality()}\\n\"\n  )\n\n\ntrain_ds cardinality: 3491\n val_ds cardinality: 748\n test_ds cardinality: 748\n\n\nCheck the first element of the dataset to be sure that the preprocessing is done correctly.\n\n\nCode\ntrain_ds.as_numpy_iterator().next()\n\n\n(array([b'I have AT&T;/Bonnaroo in the corner of my Pandora screen ...',\n       b\"in response to\\n\\nThere is a persistent meme in this article and others that models were introduced in response to some model from another company. That may be possible, but the lead time for a set of wheels and some pinstripes is 12 months, any real change is 2 years, and a fundamental change is more like 4 years. So this game of pingpong beloved of wiki editors really doesn't exist. Simple question, if pingpong worked, why did it take Toyota so long to bring the 4wd Kluger out?\",\n       b'\"\\n\\nRandyKitty, none of these \"\"collaborators\"\" did anything. I welcome their collaboration! Let them add a single line, or even delete a line that they think is unimportant! Mass deleting is not a \"\"collaboration\"\" and you are abusing language to make your point. I am the only one who collaborated on here. Take a look at the record, and you shall see I collaborated with at least 4 other editors before 2 \"\"collaborators\"\" (who are collaborators in the sense that the French were collaborators with Hitler) simply mass deleted contributions, rather than selectively keeping what they liked or approved of. Please stop abusing language.   \"',\n       b'\"\\nAnd yet it does, and will continue to, until there is something else called \"\"PS4\"\" requiring a disambig page.  Get over it. \\xe2\\x80\\x94\\'\\'\\'\\'\\'\\'T C W\"',\n       b'\"\\nAh, thanks for catching that! I guess I should have tried to read the whole thing before tagging it. {{nowrap|\\' talkcontribs}} \\nYes always worth reading the whole thing. Sometimes everything can seem totally reasonable till you see a final barbed sentence at the end, othertimes a person can seem utterly unnotable until you see a final sentence such as \"\"best known for winning silver in the 1920 Olympics\"\" SpielChequers \\n\\n Speedy deletion declined: Meghji Pethraj Shah \\nHello RA0808. I am just letting you know that I declined the speedy deletion of Meghji Pethraj Shah, a page you tagged for speedy deletion, because of the following concern: famous is an assertion of importance.\\'\\'\\'  Thank you.  SpielChequers\\'\\' \"',\n       b\"Real Chance of Love 2 cast photo \\n\\ncan you please remove the deletion note. Because that's the actual cast of the upcoming show.\",\n       b'Oh, and I guess the few thousand words you put into Extreme Rules (2012) were good too. Whatever.',\n       b'\"== With regards to \"\"Very Long\"\" tag==\\nHowever, there might be a lot to say about Senator Clinton!  The wikipedia Yom Kippur War article is long yet it was a very short event of days, compared to Clinton\\'s nearly 60 years of life.  Vote:  Do not shorten for the sake of shortening. \\n\\nI think the \"\"Very Long\"\" tag may date back to before when material was split off into subarticles.  The article is still kind of long even after that, but manageable I think.  However imagine what will happen if she gets elected President!  All that has come before will be dwarfed by the new material to come. \\n\\nRegarding the \"\"CV section\"\" that you ( \\n\\nI was orginally very confused about her background because it takes work to figure out when she was practicing law and if it overlapped with being First Lady.  A short list of jobs is useful.  What\\'s there to hide.  She was never in prison.  She worked for a prestigous law firm. \\n\\nHer practicing law did overlap with being First Lady of Arkansas, but not with being First Lady of the United States.    \\n\\nThe tag is meant for the article page, not the talk page. The article is currently around 67kb, which is long. Talk/Contribs \\n\\nReally being wikipedia NPOV: we need to treat people fairly, not have a double standard\\nThe opening paragraph has been very slightly modified to match that of Christopher Dodd, another Democratic presidential contender.  We should treat them fairly and the same.  We still give Senator Clinton the honor of mentioning that she\\'s first lady and has several first.\\n\\nI don\\'t see how you can be against it unless you aren\\'t fair.  If this isn\\'t the case and you want to change it, explain why inconsistency is fair? \\n\\nWhy are you picking only Dodd?  Look at Barack Obama, John Edwards, John Kerry ... I\\'ve looked at `1/3 to 1/2 of all the Senator articles, and all the 2008 presidential candidate articles, and there is absolutely no consistency among them in their intros.  But let me ask you this, what is your objection to the current intro?    \\n\\nDodd is from CT, that borders NY.  First, we make consistency between Dodd and Clinton, then we\\'ll worry about the others?  I can\\'t see how you can be for inconsistency.  It just isn\\'t fair!  And fairness and NPOV is what wikipedia is all about.  What\\'s so bad with Dodd\\'s intro?  It isn\\'t negative or inaccurate. \\n\\nInconsistency of arrangement of neutral and unquestioned biographical details in an intro is not a matter of fairness or NPOV - it\\'s just plain old inconsistency - so your argument is a red herring.  Your chance of getting all these articles to have consistent intros is zero, take my word for it.  Your revised intro to this article wasn\\'t as good as the existing one, because it was a bit redundant and had faulty wikilinking.  Again, what is your agenda here?  What do you think is wrong with what we have?      \\n\\nFor one thing, Dodd is called a politician, which he is.  Hillary\\'s occupation as politician is missing.  Someone is really a politician when they run for more than one office.  Jesse Ventura is difficult to call a politician cuz he just ran for one office then went back into wrestling or related jobs. \\n\\nYou are wrong about Ventura.  He was a mayor before he was governor and he was also involved in the shaping of third-party political organizations.  So he is a politician just as much as HRC or anyone else.  For the most part, however, I think it is redundant to say someone is a politician when you say they are a senator and running for president - obviously they are politicians.  I just sampled a bunch of articles, and maybe 1/3 use \\'politician\\' in the intro.  Being Wikipedia, it\\'s ve',\n       b'Interesting discussion. I was curious how this started with the people who deleted the tree, and found that independant views are not what they seem. I did a quick check at their talk pages -&gt; [] and the first thing we see are buddy chats that indicate they certainly help each other achieve their editing/delete objectives, ie sonia,Ktr101,Off2riorob. Its unfortunate that sg editors are getting fewer and less active than previous years. Hopefully sg articles in wiki will not get dominated by foreigners.',\n       b'\"\\nI\\'m sorry, but that would be utterly retarded.  Clannad (the band), the name clearly explained multiple times in their history as an amalgamation of the Gaelic Clann As Dobhar, has been active since 1972 and has spearheaded a specific style of music on their own and additionally as an influence to many other bands.  \"\"Clannad\"\", the novel/game, was created in 2004 with NO explanation of why they chose that name for the Latin-alphabet spelling, other than a rumored summation that the creator may have liked Clannad (the band). \\xe2\\x82\\xaa\\xe2\\x80\\x94  (T\\xc2\\xb7C)  \"\"\"',\n       b\"I fixed it for you.  You have to manually name the reference tag, because the software isn't smart enough to guess which one you're referring to.  (This is probably a feature, since you cite two different publications by Naylor, and odds are 50-50 that it would guess wrong if it were capable of guessing.)\",\n       b'\"\\n\\n Myntra ad \\n\\nDid you added {{advert|date=February 2012}} tag to myntra? I have made some changes removing all the brand names (except Fastrack and being human as they were info) which seemed to advertise.\\nPlease check it once and then remove the tag if it doesn\\'t seem to advertise.Thanks!\\xc2\\xa0  \\xe2\\x9c\\x89 let\\xe2\\x80\\x99s talk about it \\xc2\\xa0:) \"',\n       b'Patrick J. Kennedy\\nWhy did you delete my edit to the Patrick Kennedy article? My edit was completely factual. Homosexual Providence mayor David Cicilline will replace him in January 2011, and that is all that I wrote. I have undid your revision. Please do not erase my edits like this in the future. Thank you. 173.71.93.148',\n       b\"If making sure that an article is baffling and irrelevant to people who aren't Australian politics nerds is what turns you on, then carry on, I hope it brings you mindblowing pleasure.  190.44.133.67\",\n       b\"And further more I am not the main contributor here. I just wanted to add one section. Its been re-done to become neutral. Conflict of interest? Because I'm writing about something I know? I'm sure anything you write about I would hope you have some interest in it before getting sources or not. What do you specialize in Orange Mike? Do you have hobbies? This is getting a little too ridiculous now. I expect the WP:Whining to be thrown my way next.-\",\n       b'\"\\n\\n Hey donkey \\n\\nHey donkey, your Dad is coming.  \\xe2\\x80\\x94\\xc2\\xa0Preceding unsigned comment added by 117.196.229.56   \\n\\n Enjoying the creepy messages? \\n\\nEnjoying all these creepy messages son?  \\xe2\\x80\\x94\\xc2\\xa0Preceding unsigned comment added by 117.196.229.56   \"',\n       b'Zero is a valid code point, and the UTF-8 encoding of it is a NUL (`\\\\0`) byte. An 0xC0, 0x80 sequence in a UTF-8 is an invalid overlong encoding. In fact, the overlong encoding of NUL is used as an example of a security issue from an incorrect UTF-8 implementation in the RFC.',\n       b'Also note that recent pictures of Zimmerman, eg (http://www.trbimg.com/img-1332543851/turbine/george-zimmerman-20120323), clearly do not show an obese man who weighs 250 lbs. 72.130.4.42',\n       b'dude, the information is blatantly false, you can read the book for free, it says nothing of the sort.',\n       b'Offer free pics of you if people donate 131.151.66.248',\n       b'wow great=\\nwow great.. you are a copyright superman.. next nobel prize for copyright is for you! cheers..',\n       b\"I told you I haven't edited any comment. Some comments in past have been edited by you. I can see that. And let other edit Kushwaha article so that it doesn't give false look it is having now. I hope this is this ok.\",\n       b'\"\\n\\n I\\'m strongly opposed to any furtherance of the pretence that collaborative editing requires going around getting blessings for one\\'s actions off of people. There\\'s nothing special about your having left a \"\"per above\"\" comment on that TfD which makes your being notified of prime importance to future work on it. Indeed, that it resulted in my being first called \"\"disingenuous\"\" and then casually asked to reconsider my dedication to the encyclopedia only confirms to me that asking the peanut gallery is not a productive use of my time. Chris Cunningham (not at work) - talk \"',\n       b'\"\\n\\n Why has all the technical info been removed oover time? \\n\\nI was suprised to just see \"\"erotic\"\" vibrators in this article, and in selecting the history at randowm, I see that it used to contain, much more interesting uses of the term, (compators for constuction, joggers for paper, cell phone allert devices (including pictures) and the application I think of forvibrator, a switching device for a battery operated power supply, example battery operated radios...\\n\\nWhy the single mainded persuit of one fringe application?\"',\n       b'\"\\n\\n \"\"Bradshaw\\'s 6 yard go ahead touchdown run with 57 seconds left helped lead the New York Giants over the New England Patriots in Super Bowl XLVI\"\" \\n\\nTrue enough - but should the article perhaps point out that he was trying not to score at the time...   \"',\n       b'\"\\n\\n Your civility \\n\\nI find your general tone very uncivil, rude and threatening. There is no need to be as demanding and generally confrontive as you are being. Please read Wikipedia:Civility - I think you\\'d benefit from it. -\\'(contribs) \\n\\nI still find your general tone quite confrontive, rude, threatening and generally uncivil. Perhaps you should also read m:Wikistress and consider a Wikibreak until you have calmed down considerably, as well as reading WP:CIVIL. -\\'(contribs) \\n\\nThe fact is that I feel threatened and upset by your actions, as I find your general tone very rude and dismissive. The fact that someone can get away with being such a rude individual to many other editors (not just myself) is beyond me. I still seriously suggest that you read m:Wikistress, WP:BREAK and WP:CIVIL, especially the latter, and assess your own behaviour if you don\\'t \"\"need\"\" anyone else to do it for you, as your general uncivility will only cause you problems in the long run - maybe reading those three pages will give you something to think about and you might see fit to correct your behaviour. -\\'(contribs) \\n\\nI didn\\'t specify that I felt physically threatened, but your irrational and extremely rude behaviour is intimidating. -\\'(contribs) \"',\n       b'\"\\n\\nEhem, \"\"correct\"\" spelling? May I remind you that English was invented in England and American spelling only came about because someone was too lazy to learn so wrote his own dictionary. I know kids tried to do that to get around school classes but for an whole nation! Sorry, but it is not correct, it is a different language! p\\nSorry, had to make that rant (that\\'s the short version!), and it is UK-IE spelling to be exact as all European articles follow the English used in Europe, not America. \"\"The Union\"\" and \"\"EU\"\" is nothing to do with spelling, it is just has better flow in my opinion. \"\"EU\"\" isn\\'t a very good acronym. -  t: \\nIt was meant to be inflammatory, but I figured I could get away with a little good-natured ribbing. ) You\\'re right it\\'s not so much spelling, but probably more accurate to compare it to using odd words like \"\"lift\"\", \"\"petrol\"\", \"\"bonnet\"\", and \"\"boot\"\" for the more proper \"\"elevator\"\", \"\"gas\"\", \"\"hood\"\", and \"\"trunk\"\". I\\'ve never heard anyone on this side of the pond call it simply \"\"the Union\"\", but that\\'s no doubt because we don\\'t talk about it that much at all. Regardless, it would be quite clear from context that \"\"the Union\"\" == \"\"the European Union\"\".  (talk|contribs) \"',\n       b\"Stooges are the nickname for the fans on Murphy's site... and if you want to feel all self pitying we can end this conversation now and go down the path.   Here is what you are not getting- Shitapedia is NOT the FBI or my University.  If you want to have an encylopedic entry on me then that entry HAS TO be accurate.  Simply check the laws- you have HUGE leeway to defame celebrities and public figure and you do so freely.  BUT that stops with a non public figure.  You can try to have your cult argue that I am a public figure, but when 100 out of 100 randomly selected people can't identify me, then that game is over.  As a non public figure you do NOT have much leeway as regards defaming me.  I don't need a specialist- if you are going to keep a file on me it is going to be a file that I sign off on- period.  Unfortunately for your cultists, I have some resources to fight you on that, even if it is just sending people to vandalize.  I am also trying to work in mocking references to the site in major films.  Anything to undermine you.  You want me to play with you.  This is my name, my career, my rights- you don't get to tell me how to play.  Capisce?\",\n       b'In the discussion it is also noted that there is a request for mediation active which had not been responded to yet, and surely this has to be considered before the discussion is closed?',\n       b'\"\\n\\n I appreciate the support.  I have added this item to WP:BLPN per the instructions found in Wikipedia:BLP#Remove_unsourced_or_poorly_sourced_contentious_material, rather than attempting to handle the problem myself.  I note that this same reference is being used to include content above as well, and so will apply to that content as well.\\n\\nClearly it will be impossible for me to prove a negative, i.e. that no such verification exists, nor should I even have to attempt to do so since, per per Wikipedia:Verifiability#Burden_of_evidence that \"\"The burden of evidence lies with the editor who adds or restores material.\"\"\\n\\nIt is also clear by simple googling that this particular reference is becoming detrimental to the reputation of Wikipedia itself as I can find numerous sources that refer to this exact page and this exact topic.    \"',\n       b'BLM Platinum Continues to Paste Material onto My Discussion Page \\n\\nHi. It appears BLM Platinum did not fully understand your comment and has continued to post things on my discussion.71.48.135.174',\n       b'\"Welcome\\n\\nHello and welcome to Wikipedia!  We appreciate encyclopedic contributions, but some of your recent edits do not conform to our policies.  For more information on this, see Wikipedia\\'s policies on vandalism and limits on acceptable additions. If you\\'d like to experiment with the wiki\\'s syntax, please do so on Wikipedia:Sandbox rather than in articles.\\n\\nIf you still have questions, there is a new contributor\\'s help page, or you can write {{helpme}} below this message along with a question and someone will be along to answer it shortly.  You may also find the following pages useful for a general introduction to Wikipedia.\\nThe five pillars of Wikipedia\\nHow to edit a page\\nHelp pages\\nTutorial\\nHow to write a great article\\nManual of Style\\nPolicy on neutral point of view\\nGuideline on external links\\nGuideline on conflict of interest\\nI hope you enjoy editing Wikipedia!  Please sign your name on talk pages using four tildes (~~~~); this will automatically produce your name and the date. Feel free to write a note on the bottom of  if you want to get in touch with me. Again, welcome!   Tropics \"'],\n      dtype=object), array([[0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [1, 0, 0, 0, 1, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0]]))\n\n\nAnd we check also the shape. We expect a feature of shape (batch, ) and a target of shape (batch, number of labels).\n\n\nCode\nprint(\n  f\"text train shape: {train_ds.as_numpy_iterator().next()[0].shape}\\n\",\n  f\" text train type: {train_ds.as_numpy_iterator().next()[0].dtype}\\n\",\n  f\"label train shape: {train_ds.as_numpy_iterator().next()[1].shape}\\n\",\n  f\"label train type: {train_ds.as_numpy_iterator().next()[1].dtype}\\n\"\n  )\n\n\ntext train shape: (32,)\n  text train type: object\n label train shape: (32, 6)\n label train type: int64"
  },
  {
    "objectID": "posts/toxic_comment_filter/toxic_comment_filter.html#definition",
    "href": "posts/toxic_comment_filter/toxic_comment_filter.html#definition",
    "title": "Toxic Comment Filter",
    "section": "5.1 Definition",
    "text": "5.1 Definition\nDefine the model using the Functional API.\n\n\nCode\ndef get_deeper_lstm_model():\n    clear_session()\n    inputs = Input(shape=(None,), dtype=tf.int64, name=\"inputs\")\n    embedding = Embedding(\n        input_dim=config.max_tokens,\n        output_dim=config.embedding_dim,\n        mask_zero=True,\n        name=\"embedding\"\n    )(inputs)\n    x = Bidirectional(LSTM(256, return_sequences=True, name=\"bilstm_1\"))(embedding)\n    x = Bidirectional(LSTM(128, return_sequences=True, name=\"bilstm_2\"))(x)\n    # Global average pooling\n    x = GlobalAveragePooling1D()(x)\n    # Add regularization\n    x = Dropout(0.3)(x)\n    x = Dense(64, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.01))(x)\n    x = LayerNormalization()(x)\n    outputs = Dense(len(config.labels), activation='sigmoid', name=\"outputs\")(x)\n    model = Model(inputs, outputs)\n    model.compile(optimizer='adam', loss=\"binary_crossentropy\", metrics=config.metrics, steps_per_execution=32)\n    \n    return model\n\nlstm_model = get_deeper_lstm_model()\nlstm_model.summary()"
  },
  {
    "objectID": "posts/toxic_comment_filter/toxic_comment_filter.html#callbacks",
    "href": "posts/toxic_comment_filter/toxic_comment_filter.html#callbacks",
    "title": "Toxic Comment Filter",
    "section": "5.2 Callbacks",
    "text": "5.2 Callbacks\nFinally, the model has been trained using 2 callbacks: - Early Stopping, to avoid to consume the kaggle GPU time. - Model Checkpoint, to retrieve the best model training information.\n\n\nCode\n# callbacks\nmy_es = config.get_early_stopping()\nmy_mc = config.get_model_checkpoint(filepath=\"/checkpoint.keras\")\ncallbacks = [my_es, my_mc]"
  },
  {
    "objectID": "posts/toxic_comment_filter/toxic_comment_filter.html#final-preparation-before-fit",
    "href": "posts/toxic_comment_filter/toxic_comment_filter.html#final-preparation-before-fit",
    "title": "Toxic Comment Filter",
    "section": "5.3 Final preparation before fit",
    "text": "5.3 Final preparation before fit\nConsidering the dataset is imbalanced, to increase the performance we need to calculate the class weight. This will be passed during the training of the model.\n\n\nCode\nlab = pd.DataFrame(columns=config.labels, data=ytrain)\nr = lab.sum() / len(ytrain)\nclass_weight = dict(zip(range(len(config.labels)), r))\ndf_class_weight = pd.DataFrame.from_dict(\n  data=class_weight,\n  orient='index',\n  columns=['class_weight']\n  )\ndf_class_weight.index = config.labels\n\n\n\nCode\nlibrary(reticulate)\npy$df_class_weight\n\n\n\n\nTable 4: Class weight\n\n\n\n              class_weight\ntoxic          0.095900590\nsevere_toxic   0.009928468\nobscene        0.052757858\nthreat         0.003061800\ninsult         0.049132042\nidentity_hate  0.008710911\n\n\n\n\nIt is also useful to define the steps per epoch for train and validation dataset. This step is required to avoid to not consume entirely the dataset during the fit, which happened to me.\n\n\nCode\nsteps_per_epoch = config.train_samples // config.batch_size\nvalidation_steps = config.val_samples // config.batch_size"
  },
  {
    "objectID": "posts/toxic_comment_filter/toxic_comment_filter.html#fit",
    "href": "posts/toxic_comment_filter/toxic_comment_filter.html#fit",
    "title": "Toxic Comment Filter",
    "section": "5.4 Fit",
    "text": "5.4 Fit\nThe fit has been done on Kaggle to levarage the GPU. Some considerations about the model:\n\n.repeat() ensure the model sees all the dataset.\nepocs is set to 100.\nvalidation_data has the same repeat.\ncallbacks are the one defined before.\nclass_weight ensure the model is trained using the frequency of each class, because our dataset is imbalanced.\nsteps_per_epoch and validation_steps depend on the use of repeat.\n\n\n\nCode\nhistory = model.fit(\n  processed_train_ds.repeat(),\n  epochs=config.epochs,\n  validation_data=processed_val_ds.repeat(),\n  callbacks=callbacks,\n  class_weight=class_weight,\n  steps_per_epoch=steps_per_epoch,\n  validation_steps=validation_steps\n  )\n\n\nNow we can import the model and the history trained on Kaggle.\n\n\nCode\nmodel = load_model(filepath=config.model)\nhistory = pd.read_excel(config.history)"
  },
  {
    "objectID": "posts/toxic_comment_filter/toxic_comment_filter.html#evaluate",
    "href": "posts/toxic_comment_filter/toxic_comment_filter.html#evaluate",
    "title": "Toxic Comment Filter",
    "section": "5.5 Evaluate",
    "text": "5.5 Evaluate\n\n\nCode\n\nvalidation = model.evaluate(\n  processed_val_ds.repeat(),\n  steps=validation_steps, # 748\n  verbose=0\n  )\n\n\n\nCode\nval_metrics &lt;- tibble(\n  metric = c(\"loss\", \"precision\", \"recall\", \"auc\", \"f1_score\"),\n  value = py$validation\n  )\nval_metrics\n\n\n\n\nTable 5: Model validation metric\n\n\n\n# A tibble: 5 × 2\n  metric     value\n  &lt;chr&gt;      &lt;dbl&gt;\n1 loss      0.0542\n2 precision 0.789 \n3 recall    0.671 \n4 auc       0.957 \n5 f1_score  0.0293"
  },
  {
    "objectID": "posts/toxic_comment_filter/toxic_comment_filter.html#predict",
    "href": "posts/toxic_comment_filter/toxic_comment_filter.html#predict",
    "title": "Toxic Comment Filter",
    "section": "5.6 Predict",
    "text": "5.6 Predict\nFor the prediction, the model does not need to repeat the dataset, because it has already been trained on all of the train data. Now it has just to consume the new data to make the prediction.\n\n\nCode\n\npredictions = model.predict(processed_test_ds, verbose=0)"
  },
  {
    "objectID": "posts/toxic_comment_filter/toxic_comment_filter.html#confusion-matrix",
    "href": "posts/toxic_comment_filter/toxic_comment_filter.html#confusion-matrix",
    "title": "Toxic Comment Filter",
    "section": "5.7 Confusion Matrix",
    "text": "5.7 Confusion Matrix\nThe best way to assess the performance of a multi label classification is using a confusion matrix. Sklearn has a specific function to create a multi label classification matrix to handle the fact that there could be multiple labels for one prediction.\n\n5.7.1 Grid Search Cross Validation for best threshold\nGrid Search CV is a technique for fine-tuning hyperparameter of a ML model. It systematically search through a set of hyperparamenter values to find the combination which led to the best model performance. In this case, I am using a KFold Cross Validation is a resempling technique to split the data into k consecutive folds. Each fold is used once as a validation while the k - 1 remaining folds are the training set. See the documentation for more information.\nThe model is trained to optimize the recall. The decision was made because the cost of missing a True Positive is greater than a False Positive. In this case, missing a injurious observation is worst than classifying a clean one as bad.\n\n\n5.7.2 Confidence threshold and Precision-Recall trade off\nWhilst the KFold GDCV technique is usefull to test multiple hyperparameter, it is important to understand the problem we are facing. A multi label deep learning classifier outputs a vector of per-class probabilities. These need to be converted to a binary vector using a confidence threshold.\n\nThe higher the threshold, the less classes the model predicts, increasing model confidence [higher Precision] and increasing missed classes [lower Recall].\nThe lower the threshold, the more classes the model predicts, decreasing model confidence [lower Precision] and decreasing missed classes [higher Recall].\n\nThreshold selection mean we have to decide which metric to prioritize, based on the problem we are facing and the relative cost of misduging. We can consider the toxic comment filtering a problem similiar to cancer diagnostic. It is better to predict cancer in people who do not have it [False Positive] and perform further analysis than do not predict cancer when the patient has the disease [False Negative].\nI decide to train the model on the F1 score to have a balanced model in both precision and recall and leave to the threshold selection to increase the recall performance.\nMoreover, the model has been trained on the macro avarage F1 score, which is a single performance indicator obtained by the mean of the Precision and Recall scores of individual classses.\n\\[\nF1\\ macro\\ avg = \\frac{\\sum_{i=1}^{n} F1_i}{n}\n\\]\nIt is useful with imbalanced classes, because it weights each classes equally. It is not influenced by the number of samples of each classes. This is sette both in the config.metrics and find_optimal_threshold_cv.\n\n5.7.2.1 f1_score\n\n\nCode\nytrue = ytest.astype(int)\ny_pred_proba = predictions\noptimal_threshold_f1, best_score_f1 = config.find_optimal_threshold_cv(ytrue, y_pred_proba, f1_score)\n\nprint(f\"Optimal threshold: {optimal_threshold_f1}\")\n\n\nOptimal threshold: 0.15000000000000002\n\n\nCode\nprint(f\"Best score: {best_score_f1}\")\n\n\nBest score: 0.4788653077945807\n\n\nCode\n\n# Use the optimal threshold to make predictions\nfinal_predictions_f1 = (y_pred_proba &gt;= optimal_threshold_f1).astype(int)\n\n\nOptimal threshold f1 score: 0.15. Best score: 0.4788653.\n\n\n5.7.2.2 recall_score\n\n\nCode\nytrue = ytest.astype(int)\ny_pred_proba = predictions\noptimal_threshold_recall, best_score_recall = config.find_optimal_threshold_cv(ytrue, y_pred_proba, recall_score)\n\n# Use the optimal threshold to make predictions\nfinal_predictions_recall = (y_pred_proba &gt;= optimal_threshold_recall).astype(int)\n\n\nOptimal threshold recall: 0.05. Best score: 0.8095814.\n\n\n5.7.2.3 roc_auc_score\n\n\nCode\nytrue = ytest.astype(int)\ny_pred_proba = predictions\noptimal_threshold_roc, best_score_roc = config.find_optimal_threshold_cv(ytrue, y_pred_proba, roc_auc_score)\n\nprint(f\"Optimal threshold: {optimal_threshold_roc}\")\n\n\nOptimal threshold: 0.05\n\n\nCode\nprint(f\"Best score: {best_score_roc}\")\n\n\nBest score: 0.8809499649742268\n\n\nCode\n\n# Use the optimal threshold to make predictions\nfinal_predictions_roc = (y_pred_proba &gt;= optimal_threshold_roc).astype(int)\n\n\nOptimal threshold roc: 0.05. Best score: 0.88095.\n\n\n\n5.7.3 Confusion Matrix Plot\n\n\nCode\n# convert probability predictions to predictions\nypred = predictions &gt;=  optimal_threshold_recall # .05\nypred = ypred.astype(int)\n\n# create a plot with 3 by 2 subplots\nfig, axes = plt.subplots(3, 2, figsize=(15, 15))\naxes = axes.flatten()\nmcm = multilabel_confusion_matrix(ytrue, ypred)\n# plot the confusion matrices for each label\nfor i, (cm, label) in enumerate(zip(mcm, config.labels)):\n    disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n    disp.plot(ax=axes[i], colorbar=False)\n    axes[i].set_title(f\"Confusion matrix for label: {label}\")\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 4: Multi Label Confusion matrix"
  },
  {
    "objectID": "posts/toxic_comment_filter/toxic_comment_filter.html#classification-report",
    "href": "posts/toxic_comment_filter/toxic_comment_filter.html#classification-report",
    "title": "Toxic Comment Filter",
    "section": "5.8 Classification Report",
    "text": "5.8 Classification Report\n\n\nCode\n\ncr = classification_report(\n  ytrue,\n  ypred,\n  target_names=config.labels,\n  digits=4,\n  output_dict=True\n  )\ndf_cr = pd.DataFrame.from_dict(cr).reset_index()\n\n\n\nCode\nlibrary(reticulate)\ndf_cr &lt;- py$df_cr %&gt;% dplyr::rename(names = index)\ncols &lt;- df_cr %&gt;% colnames()\ndf_cr %&gt;% \n  pivot_longer(\n    cols = -names,\n    names_to = \"metrics\",\n    values_to = \"values\"\n  ) %&gt;% \n  pivot_wider(\n    names_from = names,\n    values_from = values\n  )\n\n\n\n\nTable 6: Classification report\n\n\n\n# A tibble: 10 × 5\n   metrics       precision recall `f1-score` support\n   &lt;chr&gt;             &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;\n 1 toxic            0.552  0.890      0.682     2262\n 2 severe_toxic     0.236  0.917      0.375      240\n 3 obscene          0.550  0.936      0.692     1263\n 4 threat           0.0366 0.493      0.0681      69\n 5 insult           0.471  0.915      0.622     1170\n 6 identity_hate    0.116  0.720      0.200      207\n 7 micro avg        0.416  0.896      0.569     5211\n 8 macro avg        0.327  0.812      0.440     5211\n 9 weighted avg     0.495  0.896      0.629     5211\n10 samples avg      0.0502 0.0848     0.0597    5211"
  },
  {
    "objectID": "posts/toxic_comment_filter/history/f1score/toxic-comment-filter-bilstm.html",
    "href": "posts/toxic_comment_filter/history/f1score/toxic-comment-filter-bilstm.html",
    "title": "Simone Brazzi",
    "section": "",
    "text": "::: {#cell-0 .cell _uuid=‘8f2839f25d086af736a60e9eeb907d3b93b6e0e5’ _cell_guid=‘b1076dfc-b9ad-4769-8c92-a6c4dae69d19’ trusted=‘true’}\n\nCode\n# This Python 3 environment comes with many helpful analytics libraries installed# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python# For example, here's several helpful packages to loadimport numpy as np # linear algebraimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)# Input data files are available in the read-only \"../input/\" directory# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directoryimport osfor dirname, _, filenames in os.walk('/kaggle/input'):    for filename in filenames:        print(os.path.join(dirname, filename))# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" # You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\n:::\n\n\nCode\nimport pandas as pdimport numpy as npimport matplotlib.pyplot as pltimport tensorflow as tfimport kerasimport keras_nlpfrom keras.backend import clear_sessionfrom keras.models import Model, load_modelfrom keras.layers import TextVectorization, Input, Dense, Embedding, Dropout, GlobalAveragePooling1D, LSTM, Bidirectional, GlobalMaxPool1D, Flatten, Attentionfrom keras.metrics import Precision, Recall, AUC, SensitivityAtSpecificity, SpecificityAtSensitivity, F1Scorefrom sklearn.model_selection import train_test_split, KFoldfrom sklearn.metrics import multilabel_confusion_matrix, classification_report, ConfusionMatrixDisplay, precision_recall_curve, f1_score, recall_score, roc_auc_scoreclass Config():    def __init__(self):        self.url = \"https://s3.eu-west-3.amazonaws.com/profession.ai/datasets/Filter_Toxic_Comments_dataset.csv\"        self.path = \"/Users/simonebrazzi/datasets/toxic_comment/Filter_Toxic_Comments_dataset.csv\"        self.max_tokens = 20000        self.output_sequence_length = 911 # check the analysis done to establish this value        self.embedding_dim = 128        self.batch_size = 32        self.epochs = 100        self.temp_split = 0.3        self.test_split = 0.5        self.random_state = 42        self.total_samples = 159571 # total train samples        self.train_samples = 111699        self.val_samples = 23936        self.features = 'comment_text'        self.labels = ['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']        self.new_labels = ['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate', \"clean\"]        self.label_mapping = {label: i for i, label in enumerate(self.labels)}        self.new_label_mapping = {label: i for i, label in enumerate(self.labels)}                self.model = \"model_f1.keras\"        self.checkpoint = \"checkpoint.lstm_model_f1.keras\"        self.history = \"lstm_model_f1.xlsx\"        self.matrix_file = \"confusion_matrices.png\"                self.metrics = [            Precision(name='precision'),            Recall(name='recall'),            AUC(name='auc', multi_label=True, num_labels=len(self.labels)),            F1Score(name=\"f1\", average=\"macro\")                    ]    def get_early_stopping(self):        early_stopping = keras.callbacks.EarlyStopping(            monitor=\"val_f1\", # \"val_recall\",            min_delta=0.2,            patience=10,            verbose=0,            mode=\"max\",            restore_best_weights=True,            start_from_epoch=3        )        return early_stopping    def get_model_checkpoint(self, filepath):        model_checkpoint = keras.callbacks.ModelCheckpoint(            filepath=filepath,            monitor=\"val_f1\", # \"val_recall\",            verbose=0,            save_best_only=True,            save_weights_only=False,            mode=\"max\",            save_freq=\"epoch\"        )        return model_checkpoint    def find_optimal_threshold_cv(self, ytrue, yproba, metric, thresholds=np.arange(.05, .35, .05), n_splits=7):      # instantiate KFold      kf = KFold(n_splits=n_splits, shuffle=True, random_state=42)      threshold_scores = []      for threshold in thresholds:        cv_scores = []        for train_index, val_index in kf.split(ytrue):          ytrue_val = ytrue[val_index]          yproba_val = yproba[val_index]          ypred_val = (yproba_val &gt;= threshold).astype(int)          score = metric(ytrue_val, ypred_val, average=\"macro\")          cv_scores.append(score)        mean_score = np.mean(cv_scores)        threshold_scores.append((threshold, mean_score))        # Find the threshold with the highest mean score        best_threshold, best_score = max(threshold_scores, key=lambda x: x[1])      return best_threshold, best_scoreconfig = Config()\n\n\n\n\nCode\nfile = tf.keras.utils.get_file(\"Filter_Toxic_Comments_dataset.csv\", config.url)df = pd.read_csv(file)# df = pd.read_csv(config.path)df.loc[df.sum_injurious == 0, \"clean\"] = 1df.loc[df.sum_injurious != 0, \"clean\"] = 0x = df[config.features].valuesy = df[config.labels].valuesxtrain, xtemp, ytrain, ytemp = train_test_split(  x,  y,  test_size=config.temp_split, # .3  random_state=config.random_state  )xtest, xval, ytest, yval = train_test_split(  xtemp,  ytemp,  test_size=config.test_split, # .5  random_state=config.random_state  )print(    f\"df shape: {df.shape[0]}\\n\",  f\"xtrain shape: {xtrain.shape}\\n\",  f\"ytrain shape: {ytrain.shape}\\n\",  f\"xtest shape: {xtest.shape}\\n\",  f\"ytest shape: {ytest.shape}\\n\",  f\"xval shape: {xval.shape}\\n\",  f\"yval shape: {yval.shape}\\n\"  f\"labels: {config.labels}\\n\"  )text_vectorization = TextVectorization(  max_tokens=config.max_tokens,  standardize=\"lower_and_strip_punctuation\",  split=\"whitespace\",  output_mode=\"int\",  output_sequence_length=config.output_sequence_length,  pad_to_max_tokens=True  )train_ds = (    tf.data.Dataset    .from_tensor_slices((xtrain, ytrain))    .shuffle(xtrain.shape[0])    .batch(config.batch_size)    .prefetch(tf.data.experimental.AUTOTUNE))test_ds = (    tf.data.Dataset    .from_tensor_slices((xtest, ytest))    .batch(config.batch_size)    .prefetch(tf.data.experimental.AUTOTUNE))val_ds = (    tf.data.Dataset    .from_tensor_slices((xval, yval))    .batch(config.batch_size)    .prefetch(tf.data.experimental.AUTOTUNE))# Prepare a dataset that only yields raw text inputs (no labels)text_train_ds = train_ds.map(lambda x, y: x)# Adapt the text vectorization layer to the text data to index the dataset vocabularytext_vectorization.adapt(text_train_ds)processed_train_ds = train_ds.map(    lambda x, y: (text_vectorization(x), y),    num_parallel_calls=tf.data.experimental.AUTOTUNE)processed_val_ds = val_ds.map(    lambda x, y: (text_vectorization(x), y),    num_parallel_calls=tf.data.experimental.AUTOTUNE)processed_test_ds = test_ds.map(    lambda x, y: (text_vectorization(x), y),    num_parallel_calls=tf.data.experimental.AUTOTUNE)from keras.layers import LayerNormalization, MultiHeadAttention, GlobalAveragePooling1Ddef get_deeper_lstm_model():    clear_session()    inputs = Input(shape=(None,), dtype=tf.int64, name=\"inputs\")    embedding = Embedding(        input_dim=config.max_tokens,        output_dim=config.embedding_dim,        mask_zero=True,        name=\"embedding\"    )(inputs)    x = Bidirectional(LSTM(256, return_sequences=True, name=\"bilstm_1\"))(embedding)    x = Bidirectional(LSTM(128, return_sequences=True, name=\"bilstm_2\"))(x)    # Global average pooling    x = GlobalAveragePooling1D()(x)    # Add regularization    x = Dropout(0.3)(x)    x = Dense(64, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.01))(x)    x = LayerNormalization()(x)    outputs = Dense(len(config.labels), activation='sigmoid', name=\"outputs\")(x)    model = Model(inputs, outputs)    model.compile(optimizer='adam', loss=\"binary_crossentropy\", metrics=config.metrics, steps_per_execution=32)    return modelmodel = get_deeper_lstm_model()lab = pd.DataFrame(columns=config.labels, data=ytrain)lab.shaper = lab.sum() / len(ytrain)class_weight = dict(zip(range(len(config.labels)), r))class_weightsteps_per_epoch = config.train_samples // config.batch_sizevalidation_steps = config.val_samples // config.batch_size# callbacksmy_es = config.get_early_stopping()my_mc = config.get_model_checkpoint(filepath=\"/kaggle/working/\"  + config.checkpoint)callbacks = [my_es, my_mc]\n\n\nDownloading data from https://s3.eu-west-3.amazonaws.com/profession.ai/datasets/Filter_Toxic_Comments_dataset.csv\n66034407/66034407 ━━━━━━━━━━━━━━━━━━━━ 3s 0us/step\ndf shape: 159571\n xtrain shape: (111699,)\n ytrain shape: (111699, 6)\n xtest shape: (23936,)\n ytest shape: (23936, 6)\n xval shape: (23936,)\n yval shape: (23936, 6)\nlabels: ['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']\n\n\n\n\n\nCode\nhistory_deeper_lstm_model = model.fit(    processed_train_ds.repeat(),    epochs=config.epochs,    validation_data=processed_val_ds.repeat(),    callbacks=callbacks,    class_weight=class_weight,    steps_per_epoch=steps_per_epoch,    validation_steps=validation_steps)\n\n\nEpoch 1/100\n3490/3490 ━━━━━━━━━━━━━━━━━━━━ 390s 98ms/step - auc: 0.8880 - f1: 0.0441 - loss: 0.0575 - precision: 0.7018 - recall: 0.4701 - val_auc: 0.9494 - val_f1: 0.0293 - val_loss: 0.0641 - val_precision: 0.8939 - val_recall: 0.4625\nEpoch 2/100\n3490/3490 ━━━━━━━━━━━━━━━━━━━━ 315s 90ms/step - auc: 0.9557 - f1: 0.0290 - loss: 0.0050 - precision: 0.7994 - recall: 0.6490 - val_auc: 0.9601 - val_f1: 0.0294 - val_loss: 0.0535 - val_precision: 0.7908 - val_recall: 0.6617\nEpoch 3/100\n3490/3490 ━━━━━━━━━━━━━━━━━━━━ 315s 90ms/step - auc: 0.9672 - f1: 0.0291 - loss: 0.0044 - precision: 0.8166 - recall: 0.6815 - val_auc: 0.9633 - val_f1: 0.0295 - val_loss: 0.0544 - val_precision: 0.7733 - val_recall: 0.6961\nEpoch 4/100\n3490/3490 ━━━━━━━━━━━━━━━━━━━━ 315s 90ms/step - auc: 0.9708 - f1: 0.0288 - loss: 0.0040 - precision: 0.8243 - recall: 0.7117 - val_auc: 0.9559 - val_f1: 0.0293 - val_loss: 0.0546 - val_precision: 0.7886 - val_recall: 0.6696\nEpoch 5/100\n3490/3490 ━━━━━━━━━━━━━━━━━━━━ 315s 90ms/step - auc: 0.9718 - f1: 0.0290 - loss: 0.0036 - precision: 0.8409 - recall: 0.7476 - val_auc: 0.9539 - val_f1: 0.0294 - val_loss: 0.0601 - val_precision: 0.7354 - val_recall: 0.6837\nEpoch 6/100\n3490/3490 ━━━━━━━━━━━━━━━━━━━━ 316s 90ms/step - auc: 0.9748 - f1: 0.0290 - loss: 0.0034 - precision: 0.8470 - recall: 0.7679 - val_auc: 0.9406 - val_f1: 0.0295 - val_loss: 0.0710 - val_precision: 0.7332 - val_recall: 0.6863\nEpoch 7/100\n3490/3490 ━━━━━━━━━━━━━━━━━━━━ 315s 90ms/step - auc: 0.9768 - f1: 0.0293 - loss: 0.0031 - precision: 0.8592 - recall: 0.7822 - val_auc: 0.9384 - val_f1: 0.0292 - val_loss: 0.0724 - val_precision: 0.7471 - val_recall: 0.6667\nEpoch 8/100\n3490/3490 ━━━━━━━━━━━━━━━━━━━━ 316s 90ms/step - auc: 0.9756 - f1: 0.0290 - loss: 0.0030 - precision: 0.8650 - recall: 0.7878 - val_auc: 0.9359 - val_f1: 0.0294 - val_loss: 0.0767 - val_precision: 0.7302 - val_recall: 0.6641\nEpoch 9/100\n3490/3490 ━━━━━━━━━━━━━━━━━━━━ 315s 90ms/step - auc: 0.9769 - f1: 0.0290 - loss: 0.0028 - precision: 0.8764 - recall: 0.8020 - val_auc: 0.9415 - val_f1: 0.0295 - val_loss: 0.0750 - val_precision: 0.7159 - val_recall: 0.6955\nEpoch 10/100\n3490/3490 ━━━━━━━━━━━━━━━━━━━━ 316s 90ms/step - auc: 0.9785 - f1: 0.0293 - loss: 0.0028 - precision: 0.8752 - recall: 0.8072 - val_auc: 0.9263 - val_f1: 0.0295 - val_loss: 0.0795 - val_precision: 0.7649 - val_recall: 0.6282\nEpoch 11/100\n3490/3490 ━━━━━━━━━━━━━━━━━━━━ 315s 90ms/step - auc: 0.9775 - f1: 0.0291 - loss: 0.0027 - precision: 0.8837 - recall: 0.8062 - val_auc: 0.9360 - val_f1: 0.0296 - val_loss: 0.0721 - val_precision: 0.7470 - val_recall: 0.6254\nEpoch 12/100\n3490/3490 ━━━━━━━━━━━━━━━━━━━━ 313s 89ms/step - auc: 0.9791 - f1: 0.0297 - loss: 0.0027 - precision: 0.8825 - recall: 0.8113 - val_auc: 0.9368 - val_f1: 0.0296 - val_loss: 0.0776 - val_precision: 0.7307 - val_recall: 0.6644\nEpoch 13/100\n3490/3490 ━━━━━━━━━━━━━━━━━━━━ 316s 90ms/step - auc: 0.9788 - f1: 0.0293 - loss: 0.0026 - precision: 0.8795 - recall: 0.8193 - val_auc: 0.9370 - val_f1: 0.0295 - val_loss: 0.0743 - val_precision: 0.7382 - val_recall: 0.6413\nEpoch 14/100\n3490/3490 ━━━━━━━━━━━━━━━━━━━━ 314s 89ms/step - auc: 0.9781 - f1: 0.0295 - loss: 0.0025 - precision: 0.8892 - recall: 0.8181 - val_auc: 0.9309 - val_f1: 0.0295 - val_loss: 0.0855 - val_precision: 0.7386 - val_recall: 0.6492\n\n\n\n\nCode\nmodel.save(\"/kaggle/working/\" + config.model)pd.DataFrame.from_dict(history_deeper_lstm_model.history).to_excel(\"/kaggle/working/\" + config.history)\n\n\n\n\nCode\nimport kerasfrom keras.models import load_modelmodel = load_model(filepath=\"/kaggle/working/\" + config.model)history = pd.read_excel(\"/kaggle/working/\" + config.history)\n\n\n\n\nCode\nconfig.model, config.history\n\n\n('model_f1.keras', 'lstm_model_f1.xlsx')\n\n\n\n\nCode\nvalidation = model.evaluate(  processed_val_ds.repeat(),  steps=validation_steps, # 748    verbose=1  )\n\n\n748/748 ━━━━━━━━━━━━━━━━━━━━ 87s 38ms/step - auc: 0.9542 - f1: 0.0287 - loss: 0.0529 - precision: 0.7858 - recall: 0.6763\n\n\n\n\nCode\npredictions = model.predict(processed_test_ds, verbose=1)\n\n\n748/748 ━━━━━━━━━━━━━━━━━━━━ 45s 41ms/step\n\n\n\n\nCode\nytrue = ytest.astype(int)y_pred_proba = predictionsoptimal_threshold_recall, best_score_recall = config.find_optimal_threshold_cv(ytrue, y_pred_proba, recall_score)# Use the optimal threshold to make predictionsfinal_predictions_recall = (y_pred_proba &gt;= optimal_threshold_recall).astype(int)\n\n\n\n\nCode\n# convert probability predictions to predictionsypred = predictions &gt;=  optimal_threshold_recall # .05ypred = ypred.astype(int)# create a plot with 3 by 2 subplotsfig, axes = plt.subplots(3, 2, figsize=(15, 15))axes = axes.flatten()mcm = multilabel_confusion_matrix(ytrue, ypred)# plot the confusion matrices for each labelfor i, (cm, label) in enumerate(zip(mcm, config.labels)):    disp = ConfusionMatrixDisplay(confusion_matrix=cm)    disp.plot(ax=axes[i], colorbar=False)    axes[i].set_title(f\"Confusion matrix for label: {label}\")plt.tight_layout()plt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\ncr = classification_report(  ytrue,  ypred,  target_names=config.labels,  digits=4  )print(cr)\n\n\n               precision    recall  f1-score   support\n\n        toxic     0.5524    0.8899    0.6817      2262\n severe_toxic     0.2355    0.9167    0.3748       240\n      obscene     0.5495    0.9359    0.6924      1263\n       threat     0.0366    0.4928    0.0681        69\n       insult     0.4712    0.9145    0.6219      1170\nidentity_hate     0.1164    0.7198    0.2004       207\n\n    micro avg     0.4164    0.8958    0.5685      5211\n    macro avg     0.3269    0.8116    0.4399      5211\n weighted avg     0.4947    0.8958    0.6295      5211\n  samples avg     0.0502    0.0848    0.0597      5211\n\n\n\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in samples with no predicted labels. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in samples with no true labels. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n\n\n\n\nCode"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Nice to meet you! My name is Simone Brazzi. I am 34 years old guy from Bologna, Italy.\nI decided to open this blog as a personal journal (what a new idea! Who ever thought about this?) of my data journey. This also means it is an opportunity to display my portfolio and shares my projects.\nAt the date of writing, I am a self made data professional. I am currently working as a Data Scientist for UniCredit Group.\nI have too many hobbies, but I will try to summarize them in a sparse order:\n\nTraining: my 2024 goal is to be able to run at least an half marathon.\nStudy: I am studying data science to further improve my knowledge in the data field. I would like to do a Master Degree in the field, but it is difficult to combine the private life with an international MSc, at least for now.\nGaming, movies and manga: of course! I mean, it is part of being a nerd, right?! For cliche purpose, I love Quentin Tarantino blabbering, Nolan craziness, even though my favorite genre is horror. My favorites directors are Jordan Pelee and Ari Aster. I am currently reading Berserker, My Hero Academia, Jujutsu Kaisen, One Piece, Chainsaw Man and Kagurabachi.\nCooking, I think it is in my vein being italian (joking!) and considering my mother is a chef.\n\nFor now, I think I have annoyed you enough: stay tuned for future posts!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Simone Brazzi",
    "section": "",
    "text": "I am a (data) nerd, with lot of passion and some mistake along the way. Data analyst by day, aspiring data wizard by night! I love using data to tell stories and drive business decisions. But I’m not content with stopping there. My passion for data and desire to expand my skillset has led me on a quest to become a data scientist. I’m a fearless problem solver with an insatiable curiosity, and I’m always seeking new challenges and opportunities to learn and grow. Let’s make some magic with data! When I don’t stare tolines of code or spreadsheet, I like to read and play video game or spend quality time with my dog."
  },
  {
    "objectID": "posts/eurostat_homicide_rate/eurostat_homicide_rate_old.html",
    "href": "posts/eurostat_homicide_rate/eurostat_homicide_rate_old.html",
    "title": "Eurostat Homicide Data",
    "section": "",
    "text": "Hi there and welcome to my first project for the blog! The topic is a sad one, but I would like to explain why I decided to start with this. I was trying Shiny for different dashboards, but I wasn’t satisfied to learn using the classic examples. Unfortunately, italian crime news suffocated the public debate with a case of homicide, in which the victim is a young women. The public debate was focusing so baaaaaadly on the concept of femicide and the data, that I decided to clear the situation with a simple dashboard.\nFirst of all, at this link you can find the dashboard published using shinyapps.io. Also at this link you can find the Github repo. As you can see, even if it is the main branch, there are some details which are not uber perfect, but that don’t interfere with the code.\nNow lets jump into the detail of how to create a Shiny dashboard!"
  },
  {
    "objectID": "posts/eurostat_homicide_rate/eurostat_homicide_rate_old.html#global.r",
    "href": "posts/eurostat_homicide_rate/eurostat_homicide_rate_old.html#global.r",
    "title": "Eurostat Homicide Data",
    "section": "global.R",
    "text": "global.R\nAs said, this file is our usual R Script file. First thing first, we import our libraries:\n\n\nCode\n# wrangling\nlibrary(\"tidyverse\")\nlibrary(\"readr\")\nlibrary(\"stringr\")\nlibrary(\"dplyr\")\nlibrary(\"magrittr\")\nlibrary(\"forcats\")\nlibrary(\"lubridate\")\nlibrary(\"writexl\")\nlibrary(\"eurostat\")\n# plotting and dashboarding\nlibrary(\"shiny\")\nlibrary(\"shinythemes\")\nlibrary(\"ggplot2\")\nlibrary(\"plotly\")\nlibrary(\"scales\")\nlibrary(\"RColorBrewer\")\nlibrary(\"waiter\")\n# connecting and other\nlibrary(\"rsconnect\")\nlibrary(\"markdown\")\n\n\nLots of packages! The division is merely to remember how everything is managed and because I have OCD for this type of things.\nI want to focus on some packages:\n\ntidyverse, we all know it. As you can see, I also imported lots of single packages which compose the tidyverse, because I was getting errors of missing methods.\neurostat, which lets data flows from the eurostat website to my dashboard. This also lets the dashboard automatically updates when new data is available.\nscales, to nicely scaling my x and y axis.\nRColorBrewer, because I wanted to have a colorblind safe dashboard, even tough I am not.\nwaiter, for nice waiting images while the dashboard is loading.\n\nNow we can focus on the data importing and wrangling. For this, the eurostat library does the job. Lets focus on the crim_hom_vrel dataset.\n\n\nCode\n# search in eurostat db\nhomicide &lt;- search_eurostat(\"homicide\")\n\n# import data to variable\ncrim_hom_vrel &lt;- get_eurostat(\"crim_hom_vrel\", time_format = \"date\")\n\n# convert all observations to understandable data\ncrim_hom_vrel &lt;- label_eurostat(crim_hom_vrel)\n\n# label_eurostat_vars(crim_hom_vrel)\n\n# order data by country and date for time series purpose\ncrim_hom_vrel &lt;- crim_hom_vrel %&gt;% \n  arrange(geo, time)\n\ncrim_hom_vrel_grouped &lt;- crim_hom_vrel %&gt;% \n  dplyr::group_by(geo, time, sex, pers_cat, unit) %&gt;% \n  dplyr::summarise(values_grouped = sum(values), .groups = \"drop\") %&gt;% \n  filter(unit == \"Number\") %&gt;% \n  arrange(geo, time, sex)\n\n\nEverything pretty simple. I would like to highlight something about the dplyr::group_by and dplyr::summarise. As you can see, after having grouped and summarized, I need to drop the groups with the method .groups = \"drop\". With dplyr v.1.1.0 we can do the same with the help of the .by method in summarise.\n\n\nCode\ncrim_hom_vrel_grouped &lt;- crim_hom_vrel %&gt;% \n  dplyr::summarise(\n    values_grouped = sum(values),\n    .by = c(geo, time, sex, pers_cat, unit)\n    ) %&gt;% \n  filter(unit == \"Number\") %&gt;% \n  arrange(geo, time, sex)\n\n\nCopying from the dplyr website the differences between .by and group_by() are:\n\n\n\n.by\ngroup_by()\n\n\n\n\nGrouping only affects a single verb\nGrouping is persistent across multiple verbs\n\n\nSelects variables with tidy-select\nComputes expressions with data-masking\n\n\nSummaries use existing order of group keys\nSummaries sort group keys in ascending order\n\n\n\nLast part is all about colors.\n\n\nCode\n# brewer.pal(11, \"RdYlBu\")\npalette &lt;- c(\"#A50026\", \"#D73027\", \"#F46D43\", \"#FDAE61\", \"#FEE090\", \"#FFFFBF\", \"#E0F3F8\", \"#ABD9E9\", \"#74ADD1\", \"#4575B4\", \"#313695\")\n\npalette_crim_hom_vrel_grouped &lt;- rep(\n  palette,\n  length.out = crim_hom_vrel_grouped$geo %&gt;% str_unique() %&gt;% length()\n  )\n\n\nHere I defined the palette using ColorBrewer. Using rep I replicated the 11 colours for the length of the unique geo values."
  },
  {
    "objectID": "posts/eurostat_homicide_rate/eurostat_homicide_rate_old.html#ui.r",
    "href": "posts/eurostat_homicide_rate/eurostat_homicide_rate_old.html#ui.r",
    "title": "Eurostat Homicide Data",
    "section": "ui.R",
    "text": "ui.R"
  }
]